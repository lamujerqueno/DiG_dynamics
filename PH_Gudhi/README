Code to compute cubical persistent homology (via Gudhi) and other topological descriptors 
This code requires python 3 and the following python packages:
1) GUDHI
2) OpenCV
3) Pillow

***********************************************************************************************************
SETTINGS.txt is the only file that needs to be modified whenever any of the following computations is run. 
***********************************************************************************************************

1. write_images.py
   Transforms video frames to grayscale (or other user-defined scale), 
   Input: video or video frames from experiments
   Output: cropped grey-scale images (might produce R,G B channels too; *.png files)  and parameters.csv
      
2. write_perseus.py
    Produces perseus-formatted files from processed frames.
	Input: write_images.m output files
	Output: perseus-formatted files (*.csv)
   
3. write_persistence.py
   It computes persistence diagrams.
   Input data: write_perseus.py output files
   Output data: csv files for each dimension computed; each file contains births and deaths of a persistence diagram given separate in two columns.
   (*.csv)

4. write_PDimages.py
   Creates the persistence diagram plot.
   Input: write_persistence.py output files
   Output: persistence diagram in all dimensions (*.png)
   
5. write_PDandpics.py
   creates a video where every frame puts together, in a horizontal position, a grey-scale image and its corresponding persistence diagram.
   Input: write_images.py and write_PDimages.py output files.
   Output: a single video (*.mp4).
   
6. norm_persistence.py
   Compute the p-norm of each persistence diagram.
   Input: write_persistence.py output data
   Output: a single csv file (for each dimension computed in persistece) containing the p-norm of each peristence diagram and  a README file.
   
7. dist_persistence.py
   Compute the p-norm of each persistence diagram.
   Input: write_persistence.py output data.
   Output: a single csv file (for each dimension computed in persistence) containing the Warssestein distance matrix  and a README file.
   
8. norm_pictures.py
   Input: write_images.py or crop_images.py output files
   Output:Oa single csv file with the Euclidean norm of the image and a README file.
   
9. norm_gradient.py   
   Input: write_images.py or crop_images.py output data
   Output: a single csv file with the L^2 norm of the gradient of the image and a README file.

10. dist_pictures.py
    Input: write_images.py or crop_images.py output data
   
11. dist_gradient.py
    Input: write_images.py or crop_images.py output data 
    Output: a single csv file containing the gradient distance matrix and a README file.
   
12. crop_images.py
    Input: write_images.py output data
    Output: a folder containing the cropped images



